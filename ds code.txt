1

sudo apt update
sudo apt install openjdk-8-jdk -y

wget https://dlcdn.apache.org/hadoop/common/hadoop-3.3.6/hadoop-3.3.6.tar.gz

tar -xvzf hadoop-3.3.6.tar.gz

sudo mv hadoop-3.3.6 /usr/local/hadoop

nano ~/.bashrc

export HADOOP_HOME=/usr/local/hadoop
export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin
export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop
export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export HADOOP_MAPRED_HOME=$HADOOP_HOME
export HADOOP_COMMON_HOME=$HADOOP_HOME
export HADOOP_HDFS_HOME=$HADOOP_HOME
export YARN_HOME=$HADOOP_HOME

source ~/.bashrc

nano $HADOOP_HOME/etc/hadoop/hadoop-env.sh
export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64

nano $HADOOP_HOME/etc/hadoop/core-site.xml

<configuration>
    <property>
        <name>fs.defaultFS</name>
        <value>hdfs://localhost:9000</value>
    </property>
</configuration>

nano $HADOOP_HOME/etc/hadoop/hdfs-site.xml

<configuration>
    <property>
        <name>dfs.replication</name>
        <value>1</value>
    </property>
    <property>
        <name>dfs.namenode.name.dir</name>
        <value>file:///usr/local/hadoop/hdfs/namenode</value>
    </property>
    <property>
        <name>dfs.datanode.data.dir</name>
        <value>file:///usr/local/hadoop/hdfs/datanode</value>
    </property>
</configuration>

nano $HADOOP_HOME/etc/hadoop/mapred-site.xml

<configuration>
    <property>
        <name>mapreduce.framework.name</name>
        <value>yarn</value>
    </property>
</configuration>

nano $HADOOP_HOME/etc/hadoop/yarn-site.xml

<configuration>
    <property>
        <name>yarn.resourcemanager.hostname</name>
        <value>localhost</value>
    </property>
    <property>
        <name>yarn.nodemanager.aux-services</name>
        <value>mapreduce_shuffle</value>
    </property>
</configuration>

hdfs namenode -format

sudo apt install openssh-server
sudo systemctl start ssh
sudo systemctl enable ssh
sudo systemctl status ssh
ssh-keygen -t rsa -P "" -f ~/.ssh/id_rsa
cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
chmod 600 ~/.ssh/authorized_keys
chmod 700 ~/.ssh
ssh localhost

start-dfs.sh


start-yarn.sh

jps

http://localhost:9870
http://localhost:8088


2


start-dfs.sh
start-yarn.sh

hdfs dfs -mkdir /mydata

echo "Hello, this is my first Hadoop file!" > example.txt

hdfs dfs -put example.txt /mydata/

hdfs dfs -ls /mydata

hdfs dfs -cat /mydata/example.txt

hdfs dfs -rm /mydata/example.txt

hdfs dfs -rm -r /mydata

$HADOOP_HOME/sbin/stop-dfs.sh
$HADOOP_HOME/sbin/stop-yarn.sh



3

pom.xml :

<dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-common</artifactId>
            <version>3.3.3</version>
        </dependency>        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-mapreduce-client-core</artifactId>
            <version>3.3.3</version>
        </dependency>

2. Create input file
cd ~
echo "Hello Hadoop Hello MapReduce" > input.txt

# 3. Create input directory in HDFS and upload the file
hdfs dfs -mkdir /input
hdfs dfs -put input.txt /input/

# 4. Verify file is in HDFS
hdfs dfs -ls /input

# 5. Create and write the WordCount Java program
nano WordCount.java

import java.io.IOException;
import java.util.StringTokenizer;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class WordCount {
    public static class TokenizerMapper extends Mapper<Object, Text, Text, IntWritable> {
        private final static IntWritable one = new IntWritable(1);
        private Text word = new Text();

        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
            StringTokenizer itr = new StringTokenizer(value.toString());
            while (itr.hasMoreTokens()) {
                word.set(itr.nextToken());
                context.write(word, one);
            }
        }
    }

    public static class IntSumReducer extends Reducer<Text, IntWritable, Text, IntWritable> {
        private IntWritable result = new IntWritable();

        public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
            int sum = 0;
            for (IntWritable val : values) {
                sum += val.get();
            }
            result.set(sum);
            context.write(key, result);
        }
    }

    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "word count");
        job.setJarByClass(WordCount.class);
        job.setMapperClass(TokenizerMapper.class);
        job.setCombinerClass(IntSumReducer.class);
        job.setReducerClass(IntSumReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}

nano $HADOOP_HOME/etc/hadoop/mapred-site.xml

<configuration>
    <property>
        <name>mapreduce.framework.name</name>
        <value>yarn</value>
    </property>
    <property>
        <name>yarn.app.mapreduce.am.env</name>
        <value>HADOOP_MAPRED_HOME=/home/abi/hadoop</value>
    </property>
    <property>
        <name>mapreduce.map.env</name>
        <value>HADOOP_MAPRED_HOME=/home/abi/hadoop</value>
    </property>
    <property>
        <name>mapreduce.reduce.env</name>
        <value>HADOOP_MAPRED_HOME=/home/abi/hadoop</value>
    </property>
</configuration>


# 6. Compile the program
javac -classpath `hadoop classpath` -d . WordCount.java

# 7. Create the jar file
jar cf wc.jar WordCount*.class

# 8. Run the job (delete old output if exists to avoid error)
hdfs dfs -rm -r /output
hadoop jar wc.jar WordCount /input /output

# 9. View the output
hdfs dfs -ls /output
hdfs dfs -cat /output/part-r-00000

# 10. Stop Hadoop services
$HADOOP_HOME/sbin/stop-dfs.sh
$HADOOP_HOME/sbin/stop-yarn.sh


4,5,6,7



sudo apt update
sudo apt install openjdk-8-jdk -y

java -version

wget https://downloads.apache.org/pig/latest/pig-0.17.0.tar.gz

tar -xvzf pig-0.17.0.tar.gz

sudo mv pig-0.17.0 /opt/pig

nano ~/.bashrc

export PIG_HOME=/opt/pig
export PATH=$PIG_HOME/bin:$PATH
export PIG_CLASSPATH=$HADOOP_HOME/conf

source ~/.bashrc

pig -version

$HADOOP_HOME/sbin/start-dfs.sh
$HADOOP_HOME/sbin/start-yarn.sh

pig -x mapreduce

quit;


$HADOOP_HOME/sbin/start-dfs.sh
$HADOOP_HOME/sbin/start-yarn.sh

echo -e "1,John,45000\n2,Alice,55000\n3,Bob,60000\n4,Mary,70000" > employees.txt

hdfs dfs -mkdir /pigdata
hdfs dfs -put employees.txt /pigdata/

pig -x mapreduce

employees = LOAD '/pigdata/employees.txt' USING PigStorage(',') 
            AS (id:int, name:chararray, salary:int);

high_salary = FILTER employees BY salary > 50000;

DUMP high_salary;

quit;


8


cd ~/Downloads

tar -xvzf apache-hive-4.0.1-bin.tar.gz

sudo mv apache-hive-4.0.1-bin /usr/local/hive

nano ~/.bashrc

export HIVE_HOME=/usr/local/hive

export PATH=$PATH:$HIVE_HOME/bin

source ~/.bashrc

schematool -initSchema -dbType derby

hive

sudo nano /usr/local/hadoop/etc/hadoop/core-site.xml

hadoop.proxyuser.abi.hosts * hadoop.proxyuser.abi.groups *
stop-dfs.sh

start-dfs.sh

hdfs dfs -mkdir -p /user/hive/warehouse

hdfs dfs -chmod -R 777 /user/hive/warehouse

hiveserver2

beeline -u jdbc:hive2://localhost:10000

CREATE DATABASE studentdb; USE studentdb;

CREATE TABLE students ( id INT, name STRING, age INT ) ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS TEXTFILE;

nano ~/students.csv

1,Alice,20 2,Bob,21 3,Charlie,22

LOAD DATA LOCAL INPATH '/home/abi/students.csv' INTO TABLE students;

SELECT * FROM students;



9,10



wget https://dlcdn.apache.org/spark/spark-3.5.5/spark-3.5.5-bin-hadoop3.tgz

tar xvf spark-3.5.5-bin-hadoop3.tgz

sudo mv spark-3.5.5-bin-hadoop3 /opt/spark

nano ~/.bashrc

export SPARK_HOME=/opt/spark export PATH=$SPARK_HOME/bin:$PATH

source ~/.bashrc

spark-shell

pyspark

sc.pythonVer

sc.master

my_list = range(1,10) squared_list_lambda = list(map(lambda x: x**2, my_list))

print("The squared numbers are", squared_list_lambd